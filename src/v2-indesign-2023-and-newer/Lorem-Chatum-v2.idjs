// Lorem Chatum v2.0 for Adobe InDesign 2023 and newer

// Copyright (c) 2023 by Adam Twardoch
// https://github.com/twardoch/lorem-chatum-for-indesign
// Licensed under the Apache 2.0 License

// Create a new OpenAI API secret key at https://platform.openai.com/account/api-keys
// and paste it below
const OPENAI_API_KEY = "sk-";


let TEXT_COLOR;
if (app.generalPreferences.uiBrightnessPreference <= 0.5) {
    TEXT_COLOR = "white";
} else {
    TEXT_COLOR = "black";
}


async function alert(msg) {
    /**
     * This function creates a dialog box with a message and an OK button.
     * @param {string} msg - The message to display in the dialog box.
     * @returns {Promise} - A promise that resolves when the OK button is clicked.
     */
    return new Promise((resolve) => {
        const dialog = document.createElement("dialog");
        dialog.innerHTML = `
            <form method="dialog" style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 8px 14px; color: inherit;">
                <sp-body size="S" style="color: ${TEXT_COLOR};">
                    <sp-text id="alert-message">${msg}</sp-text>
                </sp-body>
                <sp-footer>
                    <sp-button id="ok-button" variant="cta">OK</sp-button>
                </sp-footer>
            </form>
        `;


        const okButton = dialog.querySelector("#ok-button");
        okButton.addEventListener("click", () => {
            dialog.close();
            resolve();
        });

        document.body.appendChild(dialog);
        dialog.showModal();
    });
}

async function showProgress() {
    /**
     * This function creates a dialog box with a message indicating that the script is running.
     * @returns {Promise} - A promise that resolves when the dialog box is closed.
     */
    const dialog = document.createElement("dialog");
    dialog.innerHTML = `
        <form method="dialog" style="padding: 8px 14px;">
            <sp-body size="S" style="color: ${TEXT_COLOR};">
                <sp-text>Lorem Chatum dolor...</sp-text>
            </sp-body>
        </form>
    `;
    document.body.appendChild(dialog);
    const progressBar = dialog.querySelector("#progress-bar");
    dialog.showModal();
    return { dialog, progressBar };
}

async function openAIApi(apiKey, prompt, lang, maxTokens) {
    /**
     * This function sends a request to the OpenAI API to generate text based on a prompt.
     * @param {string} apiKey - The OpenAI API key.
     * @param {string} prompt - The prompt to generate text from.
     * @param {string} lang - The language to generate text in.
     * @param {number} maxTokens - The maximum number of tokens to generate.
     * @returns {Promise} - A promise that resolves with the generated text.
     */
    let requestBody = JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
            {
                role: 'system',
                content:
                    'Write an essay in ' + lang + ', to the max length, by continuing the prompt. Do not ask anything, do not add anything that is not requested.',
            },
            { role: 'user', content: prompt },
        ],
        temperature: 1,
        max_tokens: maxTokens,
        top_p: 1,
        n: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
    });

    let response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + apiKey,
        },
        body: requestBody
    });

    if (!response.ok) {
        if (response.statusText == 'unauthorized') {
            throw new Error(`<a href="https://platform.openai.com/account/api-keys">Click here to create an OpenAI API secret key,</a> then paste it at the beginning of this script, and run again.`);
        } else {
            throw new Error(`Error connecting to OpenAI API: ${response.statusText}.`);
        }
    }

    let responseData = await response.json();
    let completion = responseData.choices[0].message.content;
    return completion;
}

async function getText(textFrame) {
    /**
     * This function gets the text content of a text frame.
     * @param {TextFrame} textFrame - The text frame to get the text content from.
     * @returns {Promise} - A promise that resolves with the text content of the text frame.
     */
    var text = "";
    var words = textFrame.words;
    if (words != null) {
        for (var i = 0; i < words.length; i++) {
            var word = words.item(i);
            var wordContent = word.contents;

            if (typeof wordContent === 'string') {
                text += wordContent + " ";
            }
        }
    }

    return text;
}

async function getContext(textFrame) {
    /**
     * This function gets the context for generating text based on a text frame.
     * @param {TextFrame} textFrame - The text frame to get the context from.
     * @returns {Promise} - A promise that resolves with the context for generating text.
     */
    var context = await getText(textFrame);
    if (context.length === 0) {
        context = await collectPageText(textFrame);
    }
    return context;
}

async function collectPageText(textFrame) {
    /**
     * This function collects text from all text frames on a page.
     * @param {TextFrame} textFrame - The text frame to collect text from.
     * @returns {Promise} - A promise that resolves with the collected text.
     */
    var currentPage = textFrame.parentPage;
    var pages = [];

    pages.push(currentPage);

    var combinedText = '';
    var maxWords = 500;
    for (var i = 0; i < pages.length; i++) {
        combinedText += await getTextFromPage(pages[i]);
        if (wordCount(combinedText) >= maxWords) {
            combinedText = await capTextAtWords(combinedText, maxWords);
            break;
        }
    }

    return combinedText;
}

async function getTextFromPage(page) {
    /**
     * This function gets the text content of all text frames on a page.
     * @param {Page} page - The page to get the text content from.
     * @returns {Promise} - A promise that resolves with the text content of all text frames on the page.
     */
    var textFrames = page.textFrames;
    var combinedText = '';
    for (var i = 0; i < textFrames.length; i++) {
        var textFrame = textFrames.item(i);
        combinedText += await getText(textFrame);
    }

    return combinedText;
}

async function wordCount(text) {
    /**
     * This function counts the number of words in a string.
     * @param {string} text - The string to count the words in.
     * @returns {Promise} - A promise that resolves with the number of words in the string.
     */
    var words = text.replace(/^\s+|\s+$/g, '').split(/\s+/);
    return words.length;
}

async function capTextAtWords(text, wordLimit) {
    /**
     * This function caps the number of words in a string.
     * @param {string} text - The string to cap the number of words in.
     * @param {number} wordLimit - The maximum number of words to allow in the string.
     * @returns {Promise} - A promise that resolves with the capped string.
     */
    var words = text.replace(/^\s+|\s+$/g, '').split(/\s+/);
    var cappedWords = words.slice(0, wordLimit);
    return cappedWords.join(' ');
}

async function estimateTokens(textFrame) {
    /**
     * This function estimates the number of tokens needed to generate text for a text frame.
     * @param {TextFrame} textFrame - The text frame to estimate the number of tokens for.
     * @returns {Promise} - A promise that resolves with the estimated number of tokens.
     */
    var frameWidth = textFrame.geometricBounds[3] - textFrame.geometricBounds[1];
    var frameHeight = textFrame.geometricBounds[2] - textFrame.geometricBounds[0];
    var fontSize = textFrame.texts.item(0).pointSize;
    var lineHeight = fontSize * 1.2;

    var avgCharWidth = fontSize * 0.6;
    var charsPerLine = Math.floor(frameWidth / avgCharWidth);
    var lines = Math.floor(frameHeight / lineHeight);

    var estimatedChars = charsPerLine * lines;
    console.warn("  frameHeight: " + frameHeight);
    console.warn("  frameWidth: " + frameWidth);
    console.warn("  lineHeight: " + lineHeight);
    console.warn("  fontSize: " + fontSize);
    console.warn("  Lines: " + lines);
    console.warn("  Chars per line: " + charsPerLine);
    console.warn("  Chars: " + estimatedChars);
    var estimatedTokens = Math.min(Math.ceil(estimatedChars), 4095);

    return estimatedTokens;
}

async function getOpenAIApiKey() {
    /**
     * This function gets the OpenAI API key.
     * @returns {Promise} - A promise that resolves with the OpenAI API key.
     */
    return OPENAI_API_KEY;
}

async function getOpenAICompletion(context, lang, estimatedTokens) {
    /**
     * This function generates text using the OpenAI API.
     * @param {string} context - The context for generating text.
     * @param {string} lang - The language to generate text in.
     * @param {number} estimatedTokens - The estimated number of tokens needed to generate text.
     * @returns {Promise} - A promise that resolves with the generated text.
     */
    var apiKey = await getOpenAIApiKey();
    var prompt = context.replace(/[\r\n]+/g, ' ') + ' ';
    var completion = '';

    try {
        completion = await openAIApi(apiKey, prompt, lang, estimatedTokens);
    } catch (error) {
        await alert('OpenAI error: ' + error.message);
    }

    return ' ' + completion.replace(/^\n/, '');
}

async function completeSelectedFrameText() {
    /**
     * This function generates text and adds it to the selected text frame.
     */
    if (
        app.documents.length === 0 ||
        app.selection.length !== 1 ||
        app.selection[0].constructorName !== 'TextFrame'
    ) {
        await alert('Please select a text frame, and set the Character language to the desired language.');
        return;
    }
    doc = app.activeDocument;
    const horizontalMeasurementUnits = doc.viewPreferences.horizontalMeasurementUnits;
    doc.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.points;
    const verticalMeasurementUnits = doc.viewPreferences.verticalMeasurementUnits;
    doc.viewPreferences.verticalMeasurementUnits = MeasurementUnits.points;
    const typographicMeasurementUnits = doc.viewPreferences.typographicMeasurementUnits;
    doc.viewPreferences.typographicMeasurementUnits = MeasurementUnits.points;
    const textSizeMeasurementUnits = doc.viewPreferences.textSizeMeasurementUnits;
    doc.viewPreferences.textSizeMeasurementUnits = MeasurementUnits.points;

    const { dialog: progressDialog } = await showProgress();
    try {
        var textFrame = app.selection[0];
        var context = await getContext(textFrame);
        var lang = textFrame.texts.item(0).appliedLanguage.name.split(":")[0];
        console.warn("CONTEXT: " + context);
        var estimatedTokens = await estimateTokens(textFrame);
        console.warn("TOKENS: " + estimatedTokens + " LANG: " + lang);
        var completion = await getOpenAICompletion(context, lang, estimatedTokens);
        console.warn("COMPLETION: " + completion);
        textFrame.contents += completion;
    } finally {
        progressDialog.close();
    }
    doc.viewPreferences.horizontalMeasurementUnits = horizontalMeasurementUnits;
    doc.viewPreferences.verticalMeasurementUnits = verticalMeasurementUnits;
    doc.viewPreferences.typographicMeasurementUnits = typographicMeasurementUnits;
    doc.viewPreferences.textSizeMeasurementUnits = textSizeMeasurementUnits;

}

await completeSelectedFrameText();
